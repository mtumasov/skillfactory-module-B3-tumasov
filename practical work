class Tag:
    def __init__(self,
                 tag,
                 toplevel=False,
                 klass=None,
                 is_single=False,
                 **kwargs):
        self.tag = tag
        self.text = ""
        self.attributes = {}
        self.is_single = is_single
        self.toplevel = toplevel
        self.childrens = []

        if klass is not None:
            self.attributes["class"] = " ".join(klass)

        for attr, val in kwargs.items():
            self.attributes[attr] = val

    def __enter__(self):
        return self

    def __exit__(self, *args):
        if self.toplevel:
            print("<%s>" % self.tag)
            for child in self.childrens:
                print(child)

            print("</%s>" % self.tag)

    def __str__(self):
        attrs = []
        for attr, val in self.attributes.items():
            attrs.append("%s='%s'" % (attr, val))
        attrs = " ".join(attrs)

        if self.childrens:
            opening = "<{tag} {attrs}>".format(tag=self.tag, attrs=attrs)
            internal = "%s" % self.text
            for child in self.childrens:
                internal += str(child) + "\n"
            ending = "</%s>" % self.tag
            return opening + internal + ending
        else:
            if self.is_single:
                return "<{tag} {attrs}>".format(tag=self.tag, attrs=attrs)
            else:
                return "<{tag} {attrs}>{text}</{tag}>".format(tag=self.tag,
                                                              attrs=attrs,
                                                              text=self.text)

    def __iadd__(self, other):
        self.childrens.append(other)
        return self


class HTML(Tag):
    def __init__(self, output=None):
        self.tag = "html"
        self.is_single = False
        self.toplevel = True
        self.output = output
        self.childrens = []
        self.attributes = {}
        self.text = ""


class TopLevelTag(Tag):
    def __init__(self, tag):
        self.is_single = False
        self.toplevel = False
        self.tag = tag
        self.childrens = []
        self.attributes = {}
        self.text = ""


if __name__ == "__main__":
    with HTML(output="test.html") as doc:
        with TopLevelTag("head") as head:
            with Tag("title") as title:
                title.text = "hello"
                head += title
            doc += head

        with TopLevelTag("body") as body:
            with Tag("h1", klass=("main-text", )) as h1:
                h1.text = "Test"
                body += h1

            with Tag("div", klass=("container", "container-fluid"),
                     id="lead") as div:
                with Tag("p") as paragraph:
                    paragraph.text = "another test"
                    div += paragraph

                with Tag("img", is_single=True, src="/icon.png") as img:
                    div += img

                body += div

            doc += body
